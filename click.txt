ng g c 
angular generate component

los componentes de angular se manejan de la siguiente manera
html: se guardan todo html
ts: se importa los component y se guarda el typescript
css: se guarda los estilos 
espect: se guardan los test 

el click se usan (click)="funcion()"
para llamar a las variables de los componentes se usan {{}}

hay que agregar el componente a .module para que sean usados
se pueden usar los componentes dentro de los componentes llamandolos en el html

el contructor se ejecuta antes de renderizar el componente
luego viene el onInit

directiva ngFor
    <li *ngFor="let heroe of heroes; let i = index">
        {{heroe}}
    </li>

*ngFor crea una variable let llamada heroe , que recorre el array heroes y lo llamamos luego con {{heroe}}
con let i mostramos el index 
sobre el div *ngIf=""
si es false oculta lo que buscamos
si es true lo muestra
*ngIf="heroeBorrado.length > 0">
si el array esta vacio es menor a 0 oculta lo que queremos

*ngIf="heroeBorrado !== ''"
*ngIf="heroeBorrado"


<div *ngIf="heroeBorrado; else noBorrado">
    <h3>HeroeBorrado:
        <small>
        {{heroeBorrado}}
    </small>
</h3>
</div>
<ng-template #noBorrado>
    <h3>No ha borrado nada</h3>
</ng-template>

refencias locales
cuando metamos un ngIf podemos usar un ng-template que venderia a ser como el else
para eso tenemos que especificar despues del *ngIf="heroeBorrado, else noBorrado"

# referencias locales van del lado del template

al armar modulos primero
import { NgModule } from '@angular/core'; se traer el modulo de angular

luego se exporta 
export class HeroesModule {

}
y se llama al decorador @NgModule
se le agregan declaraciones que es un array[arreglo]
@NgModule({
    declarations: [
        
    ]
})
y adentro van los componentes
todo lo que escribimos en declaraciones hasta que definamos√ß

importar CommonModule
    imports:[
        CommonModule
    ]

y nos importa commonmodule
se hace todo en modulos aparte y despues se agregan a imports 
agregar el commonModule siempre
si se usa if o for 
si se usa directivas de angular se importa common module
$ git tag -a v0.1.0 -m "pruebas modulos"
$ git push --tags
asi subimos tags

ng g c dbz/mainPage --skip-tests
para crear componentes
crea el componenta y actualiza el module

cuanto tira error el componente del modulo exportar el componente si o si
agregar en el module formModules 

[ngModel]="nuevo.nombre"

[ngModel]="nuevo.nombre"
al usar ng model tenemos que establecer si o si el tag
name='' 
usar comillas simples o saldra error
() escuchar evento
[] emitir evento

{{nuevo.nombre}} podemos mostrar el parametro en pantalla

personaje.poder | number
                esto es pipe 
sirve para modificar visualmente la info

<app-personajes [personajes]="personajes"></app-personajes>
este es de personajes component |  este es personajes de main component


export class PersonajesComponent {
  @Input('data') personajes:any[] = [];
}
dentro del input podemos poner el nombre que queremos que tenga 
en este caso sera data
<app-personajes [data]="personajes"></app-personajes>
desde ahi lo llamamos
ctrl + . 
nos abre soluciones y importaciones para solucionar errores
atento al usar eventEmiter que se importe desde angular core o vas a tener error


 @Output() nuevoPj:EventEmitter<Personaje> = new EventEmitter();
 lo que dice esta linea es que nuevopj emite un nuevo personaje


   @Output() nuevoPj:EventEmitter<Personaje> = new EventEmitter();
  agregar(){
    if(this.nuevo.nombre.trim().length === 0){
      return;
    }
    this.nuevoPj.emit( this.nuevo )

    solo se puede emitir tipo personaje , this.nuevo es un personaje

    F5 podemos abrir el debuger y revisar el codigo
services

lo que cambia en los servicios es el decorador es del tipo @Injectable
tiene que importarlo de angular core

hay que agregar en el module de dbz los providers
que son servicios 
se coloca informacion y fuentes en servicios para poder trabajarlos dentro de cualquiera de los componentes o servicios
para obtener o manipular data hay que hacerlo desde los servicios

  get personajes():Personaje[]{
  return this.DbzService.personajes;
  }
  con un get podemos obtener la informacion de los servicios
  al crear algo con la propiedad private hay que agregar un _ al inicio
  private _personajes:Personaje

el orden de los services es el siguiente
Propiedades
geter y seter
contructor
metodos

